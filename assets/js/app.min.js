"use strict";

angular.module("app", ["ui.router", "ngAnimate"]);
'use strict';

angular.module('app').constant('env', {
  apiUrl: 'https://gateway.marvel.com:443/v1/public'
});
'use strict';

angular.module('app').config(['$stateProvider', '$urlRouterProvider', '$httpProvider', function ($stateProvider, $urlRouterProvider, $httpProvider) {
  $stateProvider.state('home', {
    url: '/home',
    templateUrl: 'public/home/home.template.html'
  }).state('details', {
    url: '/details/:characterId',
    templateUrl: 'public/character-details-container/characterDetails.template.html',
    params: {
      characterId: null
    }
  });
  $urlRouterProvider.otherwise('/home');
}]);
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

angular.module('app').controller('CharacterDetailsController', ['CharactersService', '$stateParams', CharacterDetailsController]);

function CharacterDetailsController(charactersService, $stateParams) {
  var vm = this;
  vm.characterId = $stateParams.characterId;
  vm.characterComics = [];
  vm.characterDetail = {};
  vm.characterEvents = [];
  vm.offset = 0;
  vm.totalComicItems = 0;
  console.log('CharacterDetailsController', vm.characterId);

  vm.characterDetail = charactersService.getCharacterbyID(vm.characterId).then(function (response) {
    return vm.characterDetail = response.data.data.results[0];
  }).catch(function (error) {
    console.log(error);
  });

  vm.characterComics = charactersService.getComicsbyCharacterID(vm.characterId, vm.offset).then(function (response) {
    vm.characterComics = [].concat(_toConsumableArray(vm.characterComics), _toConsumableArray(response.data.data.results));
    vm.totalComicItems = response.data.data.total;
  }).catch(function (error) {
    console.log(error);
  });

  vm.characterEvents = charactersService.getEventsbyCharacterID(vm.characterId, vm.offset).then(function (response) {
    vm.characterEvents = [].concat(_toConsumableArray(vm.characterEvents), _toConsumableArray(response.data.data.results));
    vm.totalEventsItems = response.data.data.total;
  }).catch(function (error) {
    console.log(error);
  });

  vm.seeMoreComics = function () {
    vm.offset += 5;
    charactersService.getComicsbyCharacterID(vm.characterId, vm.offset).then(function (response) {
      vm.characterComics = [].concat(_toConsumableArray(vm.characterComics), _toConsumableArray(response.data.data.results));
      vm.totalComicItems = response.data.data.total;
    }).catch(function (error) {
      console.log(error);
    });
  };

  vm.seeMoreEvents = function () {
    vm.offset += 5;
    charactersService.getEventsbyCharacterID(vm.characterId, vm.offset).then(function (response) {
      vm.characterEvents = [].concat(_toConsumableArray(vm.characterEvents), _toConsumableArray(response.data.data.results));
      vm.totalEventsItems = response.data.data.total;
    }).catch(function (error) {
      console.log(error);
    });
  };
}
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

angular.module('app').controller('HomeController', ['CharactersService', '$state', HomeController]);

function HomeController(charactersService, $state) {
  var vm = this;
  vm.characters = [];
  vm.searchName = '';
  vm.offset = 0;

  vm.modalData = {
    title: '',
    desc: ''
  };
  vm.limits = [5, 10, 20];
  vm.limit = vm.limits[2];
  vm.totalItems = 0;
  vm.search = function () {
    vm.offset = 0;
    vm.getCharacters(true);
    window.scrollTo({
      top: 0,
      behavior: 'smooth'
    });
  };

  vm.getCharacters = function (reset) {
    charactersService.getAllCharacters(vm.searchName, vm.offset, vm.limit).then(function (response) {
      vm.totalItems = response.data.data.total;
      if (reset) {
        vm.characters = response.data.data.results;
      } else {
        vm.characters = [].concat(_toConsumableArray(vm.characters), _toConsumableArray(response.data.data.results));
      }
    }).catch(function (error) {
      console.log(error);
    });
  };

  vm.seeDetails = function (character) {
    console.log('Information', character);
    $state.go('details', { characterId: character.id });
  };

  vm.switchLimit = function (limit) {
    vm.limit = limit;
  };

  vm.seeMore = function () {
    vm.offset += vm.limit;
    vm.getCharacters();
  };
}
"use strict";

angular.module("app").service("homeService", function (env, $http) {
    this.getUsers = function () {
        return $http.get(env.apiUrl + "/users");
    };
});
'use strict';

angular.module('app').service('CharactersService', function ($http, env) {
  this.getCharacterbyID = function (characterId) {
    var params = {
      apikey: 'c0cde22d951527540f68c755eae0f8ec&',
      hash: '5862d368b4a26a67382ecc31a0acaa7c',
      ts: 1
    };

    return $http.get(env.apiUrl + '/characters/' + characterId, { params: params });
  };

  this.getComicsbyCharacterID = function (characterId, offset) {
    var params = {
      apikey: 'c0cde22d951527540f68c755eae0f8ec&',
      hash: '5862d368b4a26a67382ecc31a0acaa7c',
      ts: 1,
      offset: offset,
      limit: 5
    };

    return $http.get(env.apiUrl + '/characters/' + characterId + '/comics', { params: params });
  };

  this.getEventsbyCharacterID = function (characterId, offset) {
    var params = {
      apikey: 'c0cde22d951527540f68c755eae0f8ec&',
      hash: '5862d368b4a26a67382ecc31a0acaa7c',
      ts: 1,
      offset: offset,
      limit: 5
    };

    return $http.get(env.apiUrl + '/characters/' + characterId + '/events', { params: params });
  };

  this.getAllCharacters = function (name, offset, limit) {
    var params = {
      apikey: 'c0cde22d951527540f68c755eae0f8ec&',
      hash: '5862d368b4a26a67382ecc31a0acaa7c',
      ts: 1,
      offset: offset,
      limit: limit
    };

    if (name != null && name != '' && name != undefined) {
      params['nameStartsWith'] = name;
    }

    return $http.get(env.apiUrl + '/characters', { params: params });
  };
});
'use strict';

angular.module('app').component('listCharacterItem', {
  bindings: {
    character: '<',
    seeDetails: '&'
  },
  templateUrl: 'public/features/characters/components/list-character-item/list.Characters.html',
  controller: function controller() {},
  controllerAs: 'ctrl'
});
'use strict';

angular.module('app').directive('showPassword', function () {
  return function (scope, elem, attrs) {
    scope.$watch(attrs.showPassword, function (show) {
      if (show) {
        elem.attr('type', 'text');
      } else {
        elem.attr('type', 'password');
      }
    });
  };
});
'use strict';

angular.module('app').factory('Interceptor', ['$q', Interceptor]);
function Interceptor($q) {
  return {
    responseError: function responseError(error) {
      if (error.status === 400) {
        console.log(error);
      } else if (error.status == -1) {
        alert('Servico indisponivel');
      }
      return $q.reject(error);
    }
  };
}
'use strict';

angular.module('app').filter('status', function () {
  return function (value, param) {
    if (value === 0) {
      return '(' + param + ') inativo';
    }
    return '(' + param + ') ativo';
  };
});
"use strict";

angular.module("app").service("userService", function (env, $http) {
    this.getUSers = function () {
        return $http.get("$(env.apiUrl)/users");
    };
});